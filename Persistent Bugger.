''' Solved in Java / Exercise:
Write a function, persistence, that takes in a positive parameter num and returns its multiplicative persistence, which is the number of times you must multiply the digits in num until you reach a single digit.

For example:

 persistence(39) => 3  # Because 3*9 = 27, 2*7 = 14, 1*4=4
                       # and 4 has only one digit.

 persistence(999) => 4 # Because 9*9*9 = 729, 7*2*9 = 126,
                       # 1*2*6 = 12, and finally 1*2 = 2.

 persistence(4) => 0   # Because 4 is already a one-digit number.
 persistence(39) # returns 3, because 3*9=27, 2*7=14, 1*4=4
                 # and 4 has only one digit

 persistence(999) # returns 4, because 9*9*9=729, 7*2*9=126,
                  # 1*2*6=12, and finally 1*2=2

 persistence(4) # returns 0, because 4 is already a one-digit number
 '''
 
 
 class Persist {
  public static int persistence(long n) {
    // String.valueOf(number) transforms it into a string
    // string.charAt(i) gets the char at index i
    
    String strNumber = String.valueOf(n);
    long result=1;
    int stepCounter=0;
    
    System.out.println("The input number is: " + n);
    
    while(strNumber.length() > 1){
      result = 1;
      
      for(int i=0; i< strNumber.length(); i++ ) {  //making the calculation
        result = result * Character.getNumericValue(strNumber.charAt(i));
      }
      
      System.out.println("calculated result: " + result);
      stepCounter++;
      System.out.println("stepCounter: " + stepCounter);
      
      //setup standard situation again
      strNumber = Long.toString(result);
      System.out.println("The result for strNumber: " + strNumber);
    }  
    
    return stepCounter;
  }
}
 
 
