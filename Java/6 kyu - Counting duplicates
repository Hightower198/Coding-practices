'''Solved in Java / Exercise:
Count the number of Duplicates
Write a function that will return the count of distinct case-insensitive alphabetic characters and numeric digits that occur more than once in the input string. The input string can be assumed to contain only alphabets (both uppercase and lowercase) and numeric digits.

Example
"abcde" -> 0 # no characters repeats more than once
"aabbcde" -> 2 # 'a' and 'b'
"aabBcde" -> 2 # 'a' occurs twice and 'b' twice (`b` and `B`)
"indivisibility" -> 1 # 'i' occurs six times
"Indivisibilities" -> 2 # 'i' occurs seven times and 's' occurs twice
"aA11" -> 2 # 'a' and '1'
"ABBA" -> 2 # 'A' and 'B' each occur twice
'''



import java.util.ArrayList;
import java.util.HashSet;

public class CountingDuplicates {

  public static int duplicateCount(String givenText) {
    
    String text = givenText.toUpperCase();
    int counter = 0;
    char[] charArray = new char[text.length()];
    HashSet<Character> duplicates = new HashSet<Character>();
    
    //split text into charArray
    for(int i=0; i<text.length(); i++) {
      charArray[i] = text.charAt(i);
    }
    
    //look for duplicates
    for(int i=0; i<charArray.length; i++) {
      //check if charArray[i] has duplicates
      for(int j=i+1; j<charArray.length; j++) {
        if(charArray[i] == charArray[j] && charArray[j] != '.') {
          //duplicate found
          duplicates.add(charArray[j]); //safe duplicates in a collection that doesn't allow duplicates
          break;
        }
      }
    }
    
    return duplicates.size();
  }
}
